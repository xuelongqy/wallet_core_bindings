import java.io.File
import java.nio.file.Files
import java.security.MessageDigest

group = "com.xuelongqy.wallet_core_bindings_libs"
version = "4.3.19"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
        flatDir {
            dirs file("$buildDir/../wallet_core_bindings_libs/output")
        }
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "com.xuelongqy.wallet_core_bindings_libs"
    }

    compileSdk = 34

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")

        implementation(name: 'wallet-core', ext: 'aar')
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}

task downloadDependencies(type: Exec) {
    // Delete previously created /output subdirectory.

    def outputDir = file("$buildDir/output")
    if (outputDir.exists()) {
        outputDir.deleteDir()
    }
    outputDir.mkdirs()

    // Download all *.jar dependencies & verify their MD5 checksums.
    def filesToDownload = [
            ["url": "https://github.com/xuelongqy/wallet-core/releases/download/${version}/wallet-core.aar", "md5": "356fc6159b6926f4bc61c54728f33ccc", "destination": file("$buildDir/wallet-core.aar")]
    ]

    filesToDownload.each { fileInfo ->
        def destFile = fileInfo.destination
        if (destFile.exists()) {
            def calculatedMD5 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destFile.toPath())).encodeHex().toString()

            if (calculatedMD5 != fileInfo.md5) {
                destFile.delete()
                println "MD5 mismatch. File deleted: ${destFile}"
            }

        }

        if (!destFile.exists()) {
            destFile.parentFile.mkdirs()
            println "Downloading file from: ${fileInfo.url}"
            destFile.withOutputStream { os ->
                os << new URL(fileInfo.url).openStream()
            }

            def calculatedMD5 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destFile.toPath())).encodeHex().toString()
            if (calculatedMD5 != fileInfo.md5) {
                throw new GradleException("MD5 verification failed for ${destFile}")
            }
        }

        copy {
            from destFile
            into outputDir
        }
    }
}

assemble.dependsOn(downloadDependencies)
